//
// C++ Interface: Hexa_20
//
// Description:
//
//
// Author: Hugo LECLERC <leclerc@lmt.ens-cachan.fr>, (C) 2004
//
// Copyright: See COPYING file that comes with this distribution
//
//
#ifndef LMTHEXA_20_H
#define LMTHEXA_20_H

#include "Quad_8.h"

namespace LMT {

// --------------------------------------------------------------------------------------------------------
/*!
    Pavé à 20 noeuds
    \verbatim
    .                        7----14----6
    .                       /|         /|
    .                     15 |       13 |
    .                     /  19      /  18
    .                    4----12----5   |
    .                    |   |      |   |
    .                    |   3----10|---2
    .                    16  /      17  /
    .                    | 11       | 9
    .                    |/         |/
    .                    0----8-----1
    \relates Mesh
    \relates Element
    \keyword Maillage/Elément
    \friend samir.amrouche@lmt.ens-cachan.fr
    \friend hugo.leclerc@lmt.ens-cachan.fr
*/

struct Hexa_20 {
    static const unsigned nb_var_inter = 3;
    static const unsigned nb_nodes = 20;
    static const char *name() { return "Hexa_20"; }
    static const char *can_directly_be_represented_by() { return "Hexa_20"; }
};

// --------------------------------------------------------------------------------------------------------
template<> struct NbChildrenElement<Hexa_20,0> { static const unsigned res = 1; };
template<> struct NbChildrenElement<Hexa_20,1> { static const unsigned res = 6; };
template<> struct NbChildrenElement<Hexa_20,2> { static const unsigned res = 12; };
template<> struct NbChildrenElement<Hexa_20,3> { static const unsigned res = 20; };

template<unsigned n> struct TypeChildrenElement<Hexa_20,0,n> { typedef Hexa_20 T; };
template<unsigned n> struct TypeChildrenElement<Hexa_20,1,n> { typedef Quad_8 T; };
template<unsigned n> struct TypeChildrenElement<Hexa_20,2,n> { typedef Bar_3 T; };
template<unsigned n> struct TypeChildrenElement<Hexa_20,3,n> { typedef NodalElement T; };

template<class TN,class TNG,class TD,unsigned NET,class TC,class HET>
void append_skin_elements(Element<Hexa_20,TN,TNG,TD,NET> &e,TC &ch,HET &het,Number<0> nvi_to_subs) {
    het.add_element(e,ch,Hexa_20(),e.node(0),e.node(1),e.node(2),e.node(3),e.node(4),e.node(5),e.node(6),e.node(7),e.node(8),e.node(9),e.node(10),e.node(11),e.node(12),e.node(13),e.node(14),e.node(15),e.node(16),e.node(17),e.node(18),e.node(19));
}
template<class TN,class TNG,class TD,unsigned NET,class TC,class HET>
void append_skin_elements(Element<Hexa_20,TN,TNG,TD,NET> &e,TC &ch,HET &het,Number<1> nvi_to_subs) {
    het.add_element(e,ch,Quad_8(),e.node(0),e.node(3),e.node(2),e.node(1),e.node(11),e.node(10),e.node(9),e.node(8));
    het.add_element(e,ch,Quad_8(),e.node(4),e.node(5),e.node(6),e.node(7),e.node(12),e.node(13),e.node(14),e.node(15));
    het.add_element(e,ch,Quad_8(),e.node(0),e.node(1),e.node(5),e.node(4),e.node(8),e.node(17),e.node(12),e.node(16));
    het.add_element(e,ch,Quad_8(),e.node(1),e.node(2),e.node(6),e.node(5),e.node(9),e.node(18),e.node(13),e.node(17));
    het.add_element(e,ch,Quad_8(),e.node(3),e.node(7),e.node(6),e.node(2),e.node(19),e.node(14),e.node(18),e.node(10));
    het.add_element(e,ch,Quad_8(),e.node(0),e.node(4),e.node(7),e.node(3),e.node(16),e.node(15),e.node(19),e.node(11));
}
template<class TN,class TNG,class TD,unsigned NET,class TC,class HET>
void append_skin_elements(Element<Hexa_20,TN,TNG,TD,NET> &e,TC &ch,HET &het,Number<2> nvi_to_subs) {
    het.add_element(e,ch,Bar_3(),e.node(0),e.node(8),e.node(1));
    het.add_element(e,ch,Bar_3(),e.node(1),e.node(9),e.node(2));
    het.add_element(e,ch,Bar_3(),e.node(2),e.node(10),e.node(3));
    het.add_element(e,ch,Bar_3(),e.node(3),e.node(11),e.node(0));
    het.add_element(e,ch,Bar_3(),e.node(4),e.node(12),e.node(5));
    het.add_element(e,ch,Bar_3(),e.node(5),e.node(13),e.node(6));
    het.add_element(e,ch,Bar_3(),e.node(6),e.node(14),e.node(7));
    het.add_element(e,ch,Bar_3(),e.node(7),e.node(15),e.node(4));    
    het.add_element(e,ch,Bar_3(),e.node(0),e.node(16),e.node(4));
    het.add_element(e,ch,Bar_3(),e.node(1),e.node(17),e.node(5));
    het.add_element(e,ch,Bar_3(),e.node(2),e.node(18),e.node(6));
    het.add_element(e,ch,Bar_3(),e.node(3),e.node(19),e.node(7));
}
template<class TN,class TNG,class TD,unsigned NET,class TC,class HET>
void append_skin_elements(Element<Hexa_20,TN,TNG,TD,NET> &e,TC &ch,HET &het,Number<3> nvi_to_subs) {
    het.add_element(e,ch,NodalElement(),e.node(0));
    het.add_element(e,ch,NodalElement(),e.node(1));
    het.add_element(e,ch,NodalElement(),e.node(2));
    het.add_element(e,ch,NodalElement(),e.node(3));
    het.add_element(e,ch,NodalElement(),e.node(4));
    het.add_element(e,ch,NodalElement(),e.node(5));
    het.add_element(e,ch,NodalElement(),e.node(6));
    het.add_element(e,ch,NodalElement(),e.node(7));
    het.add_element(e,ch,NodalElement(),e.node(8));
    het.add_element(e,ch,NodalElement(),e.node(9));
    het.add_element(e,ch,NodalElement(),e.node(10));
    het.add_element(e,ch,NodalElement(),e.node(11));
    het.add_element(e,ch,NodalElement(),e.node(12));
    het.add_element(e,ch,NodalElement(),e.node(13));
    het.add_element(e,ch,NodalElement(),e.node(14));
    het.add_element(e,ch,NodalElement(),e.node(15));
    het.add_element(e,ch,NodalElement(),e.node(16));
    het.add_element(e,ch,NodalElement(),e.node(17));
    het.add_element(e,ch,NodalElement(),e.node(18));
    het.add_element(e,ch,NodalElement(),e.node(19));
}

// --------------------------------------------------------------------------------------------------------
// template<class TN,class TNG,class TD,unsigned NET,class Pvec,class T>
// void update_circum_center(const Element<Hexa_20,TN,TNG,TD,NET> &e,Pvec &C,T &R) {
//     C = getCenterOfCircumSphere( e.node(0)->pos, e.node(1)->pos, e.node(2)->pos, e.node(3)->pos, e.node(4)->pos, e.node(5)->pos, e.node(6)->pos, e.node(7)->pos );
//     R = length( e.node(0)->pos - C );
// }

template<class TN,class TNG,class TD,unsigned NET,class TM,class T>
void update_edge_ratio(const Element<Hexa_20,TN,TNG,TD,NET> &e,TM &m,T &edge_ratio) {
    T edge_length_0 = (m.get_children_of( e, Number<1>() )[ 0 ])->measure_virtual();
    T edge_length_1 = (m.get_children_of( e, Number<1>() )[ 1 ])->measure_virtual();
    T edge_length_2 = (m.get_children_of( e, Number<1>() )[ 2 ])->measure_virtual();
    T edge_length_3 = (m.get_children_of( e, Number<1>() )[ 3 ])->measure_virtual();
    T edge_length_4 = (m.get_children_of( e, Number<1>() )[ 4 ])->measure_virtual();
    T edge_length_5 = (m.get_children_of( e, Number<1>() )[ 5 ])->measure_virtual();
    T edge_min_1 = min( edge_length_0, edge_length_1, edge_length_2, edge_length_3 );
    T edge_min_2 = min( edge_length_4, edge_length_5 );
    T edge_max_1 = max( edge_length_0, edge_length_1, edge_length_2, edge_length_3 );
    T edge_max_2 = max( edge_length_4, edge_length_5 );
    edge_ratio = min( edge_min_1, edge_min_2 ) / max( edge_max_1, edge_max_2 );
}

template<class TN,class TNG,class TD,unsigned NET>
typename TypePromote<Abs,typename TNG::T>::T measure( const Element<Hexa_20,TN,TNG,TD,NET> &elem ) {
typename TNG::T V = 0.25*((0.045875854768068491385*elem.pos(4)[0]-(0.045875854768068491385*elem.pos(0)[0]+0.045875854768068491385*elem.pos(1)[0]+0.45412414523193150862*elem.pos(2)[0]+0.45412414523193150862*elem.pos(3)[0])+0.045875854768068491385*elem.pos(5)[0]+0.45412414523193150862*elem.pos(6)[0]+0.45412414523193150862*elem.pos(7)[0])*(((0.39433756729740643276*elem.pos(2)[2]-(0.39433756729740643276*elem.pos(0)[2]+0.39433756729740643276*elem.pos(1)[2])+0.39433756729740643276*elem.pos(3)[2])-0.10566243270259356724*elem.pos(4)[2]-0.10566243270259356724*elem.pos(5)[2]+0.10566243270259356724*elem.pos(6)[2]+0.10566243270259356724*elem.pos(7)[2])*(((0.072362291867717009992*elem.pos(1)[1]-0.072362291867717009992*elem.pos(0)[1]+0.71631284272709585555*elem.pos(2)[1])-0.71631284272709585555*elem.pos(3)[1]-0.019389417668419972776*elem.pos(4)[1]+0.019389417668419972776*elem.pos(5)[1]+0.19193544773676716169*elem.pos(6)[1])-0.19193544773676716169*elem.pos(7)[1])-((0.19193544773676716169*elem.pos(6)[2]+0.019389417668419972776*elem.pos(5)[2]+(0.71631284272709585555*elem.pos(2)[2]+0.072362291867717009992*elem.pos(1)[2]-0.072362291867717009992*elem.pos(0)[2])-0.71631284272709585555*elem.pos(3)[2]-0.019389417668419972776*elem.pos(4)[2])-0.19193544773676716169*elem.pos(7)[2])*(0.10566243270259356724*elem.pos(7)[1]+0.10566243270259356724*elem.pos(6)[1]+(0.39433756729740643276*elem.pos(3)[1]+0.39433756729740643276*elem.pos(2)[1]-(0.39433756729740643276*elem.pos(1)[1]+0.39433756729740643276*elem.pos(0)[1]))-0.10566243270259356724*elem.pos(4)[1]-0.10566243270259356724*elem.pos(5)[1]))+((0.19193544773676716169*elem.pos(6)[0]+0.019389417668419972776*elem.pos(5)[0]+(0.71631284272709585555*elem.pos(2)[0]+0.072362291867717009992*elem.pos(1)[0]-0.072362291867717009992*elem.pos(0)[0])-0.71631284272709585555*elem.pos(3)[0]-0.019389417668419972776*elem.pos(4)[0])-0.19193544773676716169*elem.pos(7)[0])*((0.10566243270259356724*elem.pos(7)[1]+0.10566243270259356724*elem.pos(6)[1]+(0.39433756729740643276*elem.pos(3)[1]+0.39433756729740643276*elem.pos(2)[1]-(0.39433756729740643276*elem.pos(1)[1]+0.39433756729740643276*elem.pos(0)[1]))-0.10566243270259356724*elem.pos(4)[1]-0.10566243270259356724*elem.pos(5)[1])*(0.45412414523193150862*elem.pos(7)[2]+0.45412414523193150862*elem.pos(6)[2]+0.045875854768068491385*elem.pos(5)[2]+0.045875854768068491385*elem.pos(4)[2]-(0.45412414523193150862*elem.pos(3)[2]+0.45412414523193150862*elem.pos(2)[2]+0.045875854768068491385*elem.pos(1)[2]+0.045875854768068491385*elem.pos(0)[2]))-((0.39433756729740643276*elem.pos(2)[2]-(0.39433756729740643276*elem.pos(0)[2]+0.39433756729740643276*elem.pos(1)[2])+0.39433756729740643276*elem.pos(3)[2])-0.10566243270259356724*elem.pos(4)[2]-0.10566243270259356724*elem.pos(5)[2]+0.10566243270259356724*elem.pos(6)[2]+0.10566243270259356724*elem.pos(7)[2])*(0.45412414523193150862*elem.pos(7)[1]+0.45412414523193150862*elem.pos(6)[1]+0.045875854768068491385*elem.pos(5)[1]+0.045875854768068491385*elem.pos(4)[1]-(0.45412414523193150862*elem.pos(3)[1]+0.45412414523193150862*elem.pos(2)[1]+0.045875854768068491385*elem.pos(1)[1]+0.045875854768068491385*elem.pos(0)[1])))-(0.10566243270259356724*elem.pos(7)[0]+0.10566243270259356724*elem.pos(6)[0]+(0.39433756729740643276*elem.pos(3)[0]+0.39433756729740643276*elem.pos(2)[0]-(0.39433756729740643276*elem.pos(1)[0]+0.39433756729740643276*elem.pos(0)[0]))-0.10566243270259356724*elem.pos(4)[0]-0.10566243270259356724*elem.pos(5)[0])*((((0.072362291867717009992*elem.pos(1)[1]-0.072362291867717009992*elem.pos(0)[1]+0.71631284272709585555*elem.pos(2)[1])-0.71631284272709585555*elem.pos(3)[1]-0.019389417668419972776*elem.pos(4)[1]+0.019389417668419972776*elem.pos(5)[1]+0.19193544773676716169*elem.pos(6)[1])-0.19193544773676716169*elem.pos(7)[1])*(0.45412414523193150862*elem.pos(7)[2]+0.45412414523193150862*elem.pos(6)[2]+0.045875854768068491385*elem.pos(5)[2]+0.045875854768068491385*elem.pos(4)[2]-(0.45412414523193150862*elem.pos(3)[2]+0.45412414523193150862*elem.pos(2)[2]+0.045875854768068491385*elem.pos(1)[2]+0.045875854768068491385*elem.pos(0)[2]))-((0.19193544773676716169*elem.pos(6)[2]+0.019389417668419972776*elem.pos(5)[2]+(0.71631284272709585555*elem.pos(2)[2]+0.072362291867717009992*elem.pos(1)[2]-0.072362291867717009992*elem.pos(0)[2])-0.71631284272709585555*elem.pos(3)[2]-0.019389417668419972776*elem.pos(4)[2])-0.19193544773676716169*elem.pos(7)[2])*(0.45412414523193150862*elem.pos(7)[1]+0.45412414523193150862*elem.pos(6)[1]+0.045875854768068491385*elem.pos(5)[1]+0.045875854768068491385*elem.pos(4)[1]-(0.45412414523193150862*elem.pos(3)[1]+0.45412414523193150862*elem.pos(2)[1]+0.045875854768068491385*elem.pos(1)[1]+0.045875854768068491385*elem.pos(0)[1]))))+0.25*((0.045875854768068491385*elem.pos(7)[0]+0.045875854768068491385*elem.pos(6)[0]+0.45412414523193150862*elem.pos(5)[0]+0.45412414523193150862*elem.pos(4)[0]-(0.045875854768068491385*elem.pos(3)[0]+0.045875854768068491385*elem.pos(2)[0]+0.45412414523193150862*elem.pos(1)[0]+0.45412414523193150862*elem.pos(0)[0]))*(((0.39433756729740643276*elem.pos(2)[2]-(0.39433756729740643276*elem.pos(0)[2]+0.39433756729740643276*elem.pos(1)[2])+0.39433756729740643276*elem.pos(3)[2])-0.10566243270259356724*elem.pos(4)[2]-0.10566243270259356724*elem.pos(5)[2]+0.10566243270259356724*elem.pos(6)[2]+0.10566243270259356724*elem.pos(7)[2])*((0.019389417668419972776*elem.pos(6)[1]+0.19193544773676716169*elem.pos(5)[1]+(0.072362291867717009992*elem.pos(2)[1]+0.71631284272709585555*elem.pos(1)[1]-0.71631284272709585555*elem.pos(0)[1])-0.072362291867717009992*elem.pos(3)[1]-0.19193544773676716169*elem.pos(4)[1])-0.019389417668419972776*elem.pos(7)[1])-(0.10566243270259356724*elem.pos(7)[1]+0.10566243270259356724*elem.pos(6)[1]+(0.39433756729740643276*elem.pos(3)[1]+0.39433756729740643276*elem.pos(2)[1]-(0.39433756729740643276*elem.pos(1)[1]+0.39433756729740643276*elem.pos(0)[1]))-0.10566243270259356724*elem.pos(4)[1]-0.10566243270259356724*elem.pos(5)[1])*((0.019389417668419972776*elem.pos(6)[2]+0.19193544773676716169*elem.pos(5)[2]+(0.072362291867717009992*elem.pos(2)[2]+0.71631284272709585555*elem.pos(1)[2]-0.71631284272709585555*elem.pos(0)[2])-0.072362291867717009992*elem.pos(3)[2]-0.19193544773676716169*elem.pos(4)[2])-0.019389417668419972776*elem.pos(7)[2]))+((0.019389417668419972776*elem.pos(6)[0]+0.19193544773676716169*elem.pos(5)[0]+(0.072362291867717009992*elem.pos(2)[0]+0.71631284272709585555*elem.pos(1)[0]-0.71631284272709585555*elem.pos(0)[0])-0.072362291867717009992*elem.pos(3)[0]-0.19193544773676716169*elem.pos(4)[0])-0.019389417668419972776*elem.pos(7)[0])*((0.10566243270259356724*elem.pos(7)[1]+0.10566243270259356724*elem.pos(6)[1]+(0.39433756729740643276*elem.pos(3)[1]+0.39433756729740643276*elem.pos(2)[1]-(0.39433756729740643276*elem.pos(1)[1]+0.39433756729740643276*elem.pos(0)[1]))-0.10566243270259356724*elem.pos(4)[1]-0.10566243270259356724*elem.pos(5)[1])*(0.045875854768068491385*elem.pos(7)[2]+0.045875854768068491385*elem.pos(6)[2]+0.45412414523193150862*elem.pos(5)[2]+0.45412414523193150862*elem.pos(4)[2]-(0.045875854768068491385*elem.pos(3)[2]+0.045875854768068491385*elem.pos(2)[2]+0.45412414523193150862*elem.pos(0)[2]+0.45412414523193150862*elem.pos(1)[2]))-((0.39433756729740643276*elem.pos(2)[2]-(0.39433756729740643276*elem.pos(0)[2]+0.39433756729740643276*elem.pos(1)[2])+0.39433756729740643276*elem.pos(3)[2])-0.10566243270259356724*elem.pos(4)[2]-0.10566243270259356724*elem.pos(5)[2]+0.10566243270259356724*elem.pos(6)[2]+0.10566243270259356724*elem.pos(7)[2])*(0.045875854768068491385*elem.pos(7)[1]+0.045875854768068491385*elem.pos(6)[1]+0.45412414523193150862*elem.pos(5)[1]+0.45412414523193150862*elem.pos(4)[1]-(0.045875854768068491385*elem.pos(3)[1]+0.045875854768068491385*elem.pos(2)[1]+0.45412414523193150862*elem.pos(1)[1]+0.45412414523193150862*elem.pos(0)[1])))-(0.10566243270259356724*elem.pos(7)[0]+0.10566243270259356724*elem.pos(6)[0]+(0.39433756729740643276*elem.pos(3)[0]+0.39433756729740643276*elem.pos(2)[0]-(0.39433756729740643276*elem.pos(1)[0]+0.39433756729740643276*elem.pos(0)[0]))-0.10566243270259356724*elem.pos(4)[0]-0.10566243270259356724*elem.pos(5)[0])*(((0.019389417668419972776*elem.pos(6)[1]+0.19193544773676716169*elem.pos(5)[1]+(0.072362291867717009992*elem.pos(2)[1]+0.71631284272709585555*elem.pos(1)[1]-0.71631284272709585555*elem.pos(0)[1])-0.072362291867717009992*elem.pos(3)[1]-0.19193544773676716169*elem.pos(4)[1])-0.019389417668419972776*elem.pos(7)[1])*(0.045875854768068491385*elem.pos(7)[2]+0.045875854768068491385*elem.pos(6)[2]+0.45412414523193150862*elem.pos(5)[2]+0.45412414523193150862*elem.pos(4)[2]-(0.045875854768068491385*elem.pos(3)[2]+0.045875854768068491385*elem.pos(2)[2]+0.45412414523193150862*elem.pos(0)[2]+0.45412414523193150862*elem.pos(1)[2]))-((0.019389417668419972776*elem.pos(6)[2]+0.19193544773676716169*elem.pos(5)[2]+(0.072362291867717009992*elem.pos(2)[2]+0.71631284272709585555*elem.pos(1)[2]-0.71631284272709585555*elem.pos(0)[2])-0.072362291867717009992*elem.pos(3)[2]-0.19193544773676716169*elem.pos(4)[2])-0.019389417668419972776*elem.pos(7)[2])*(0.045875854768068491385*elem.pos(7)[1]+0.045875854768068491385*elem.pos(6)[1]+0.45412414523193150862*elem.pos(5)[1]+0.45412414523193150862*elem.pos(4)[1]-(0.045875854768068491385*elem.pos(3)[1]+0.045875854768068491385*elem.pos(2)[1]+0.45412414523193150862*elem.pos(1)[1]+0.45412414523193150862*elem.pos(0)[1]))))+0.25*((0.045875854768068491385*elem.pos(7)[0]+0.45412414523193150862*elem.pos(6)[0]+0.45412414523193150862*elem.pos(5)[0]+0.045875854768068491385*elem.pos(4)[0]-(0.045875854768068491385*elem.pos(3)[0]+0.45412414523193150862*elem.pos(2)[0]+0.045875854768068491385*elem.pos(0)[0]+0.45412414523193150862*elem.pos(1)[0]))*(((0.39433756729740643276*elem.pos(6)[1]+0.39433756729740643276*elem.pos(5)[1]+(0.10566243270259356724*elem.pos(2)[1]+0.10566243270259356724*elem.pos(1)[1]-0.10566243270259356724*elem.pos(0)[1])-0.10566243270259356724*elem.pos(3)[1]-0.39433756729740643276*elem.pos(4)[1])-0.39433756729740643276*elem.pos(7)[1])*(0.072362291867717009992*elem.pos(7)[2]+0.71631284272709585555*elem.pos(6)[2]+(0.019389417668419972776*elem.pos(3)[2]+0.19193544773676716169*elem.pos(2)[2]-(0.19193544773676716169*elem.pos(1)[2]+0.019389417668419972776*elem.pos(0)[2]))-0.072362291867717009992*elem.pos(4)[2]-0.71631284272709585555*elem.pos(5)[2])-((0.39433756729740643276*elem.pos(6)[2]+(0.10566243270259356724*elem.pos(1)[2]-0.10566243270259356724*elem.pos(0)[2]+0.10566243270259356724*elem.pos(2)[2])-0.10566243270259356724*elem.pos(3)[2]-0.39433756729740643276*elem.pos(4)[2]+0.39433756729740643276*elem.pos(5)[2])-0.39433756729740643276*elem.pos(7)[2])*(0.072362291867717009992*elem.pos(7)[1]+0.71631284272709585555*elem.pos(6)[1]+(0.019389417668419972776*elem.pos(3)[1]+0.19193544773676716169*elem.pos(2)[1]-(0.19193544773676716169*elem.pos(1)[1]+0.019389417668419972776*elem.pos(0)[1]))-0.072362291867717009992*elem.pos(4)[1]-0.71631284272709585555*elem.pos(5)[1]))+((0.39433756729740643276*elem.pos(6)[0]+0.39433756729740643276*elem.pos(5)[0]+(0.10566243270259356724*elem.pos(2)[0]+0.10566243270259356724*elem.pos(1)[0]-0.10566243270259356724*elem.pos(0)[0])-0.10566243270259356724*elem.pos(3)[0]-0.39433756729740643276*elem.pos(4)[0])-0.39433756729740643276*elem.pos(7)[0])*((0.072362291867717009992*elem.pos(7)[1]+0.71631284272709585555*elem.pos(6)[1]+(0.019389417668419972776*elem.pos(3)[1]+0.19193544773676716169*elem.pos(2)[1]-(0.19193544773676716169*elem.pos(1)[1]+0.019389417668419972776*elem.pos(0)[1]))-0.072362291867717009992*elem.pos(4)[1]-0.71631284272709585555*elem.pos(5)[1])*(0.045875854768068491385*elem.pos(7)[2]+0.45412414523193150862*elem.pos(6)[2]+0.45412414523193150862*elem.pos(5)[2]+0.045875854768068491385*elem.pos(4)[2]-(0.045875854768068491385*elem.pos(3)[2]+0.45412414523193150862*elem.pos(2)[2]+0.045875854768068491385*elem.pos(0)[2]+0.45412414523193150862*elem.pos(1)[2]))-(0.072362291867717009992*elem.pos(7)[2]+0.71631284272709585555*elem.pos(6)[2]+(0.019389417668419972776*elem.pos(3)[2]+0.19193544773676716169*elem.pos(2)[2]-(0.19193544773676716169*elem.pos(1)[2]+0.019389417668419972776*elem.pos(0)[2]))-0.072362291867717009992*elem.pos(4)[2]-0.71631284272709585555*elem.pos(5)[2])*(0.045875854768068491385*elem.pos(7)[1]+0.45412414523193150862*elem.pos(6)[1]+0.45412414523193150862*elem.pos(5)[1]+0.045875854768068491385*elem.pos(4)[1]-(0.045875854768068491385*elem.pos(3)[1]+0.45412414523193150862*elem.pos(2)[1]+0.045875854768068491385*elem.pos(0)[1]+0.45412414523193150862*elem.pos(1)[1])))-(0.072362291867717009992*elem.pos(7)[0]+0.71631284272709585555*elem.pos(6)[0]+(0.019389417668419972776*elem.pos(3)[0]+0.19193544773676716169*elem.pos(2)[0]-(0.19193544773676716169*elem.pos(1)[0]+0.019389417668419972776*elem.pos(0)[0]))-0.072362291867717009992*elem.pos(4)[0]-0.71631284272709585555*elem.pos(5)[0])*(((0.39433756729740643276*elem.pos(6)[1]+0.39433756729740643276*elem.pos(5)[1]+(0.10566243270259356724*elem.pos(2)[1]+0.10566243270259356724*elem.pos(1)[1]-0.10566243270259356724*elem.pos(0)[1])-0.10566243270259356724*elem.pos(3)[1]-0.39433756729740643276*elem.pos(4)[1])-0.39433756729740643276*elem.pos(7)[1])*(0.045875854768068491385*elem.pos(7)[2]+0.45412414523193150862*elem.pos(6)[2]+0.45412414523193150862*elem.pos(5)[2]+0.045875854768068491385*elem.pos(4)[2]-(0.045875854768068491385*elem.pos(3)[2]+0.45412414523193150862*elem.pos(2)[2]+0.045875854768068491385*elem.pos(0)[2]+0.45412414523193150862*elem.pos(1)[2]))-((0.39433756729740643276*elem.pos(6)[2]+(0.10566243270259356724*elem.pos(1)[2]-0.10566243270259356724*elem.pos(0)[2]+0.10566243270259356724*elem.pos(2)[2])-0.10566243270259356724*elem.pos(3)[2]-0.39433756729740643276*elem.pos(4)[2]+0.39433756729740643276*elem.pos(5)[2])-0.39433756729740643276*elem.pos(7)[2])*(0.045875854768068491385*elem.pos(7)[1]+0.45412414523193150862*elem.pos(6)[1]+0.45412414523193150862*elem.pos(5)[1]+0.045875854768068491385*elem.pos(4)[1]-(0.045875854768068491385*elem.pos(3)[1]+0.45412414523193150862*elem.pos(2)[1]+0.045875854768068491385*elem.pos(0)[1]+0.45412414523193150862*elem.pos(1)[1]))))+0.25*((0.45412414523193150862*elem.pos(7)[0]+0.045875854768068491385*elem.pos(6)[0]+0.045875854768068491385*elem.pos(5)[0]+0.45412414523193150862*elem.pos(4)[0]-(0.45412414523193150862*elem.pos(3)[0]+0.045875854768068491385*elem.pos(2)[0]+0.045875854768068491385*elem.pos(1)[0]+0.45412414523193150862*elem.pos(0)[0]))*(((0.39433756729740643276*elem.pos(6)[1]+0.39433756729740643276*elem.pos(5)[1]+(0.10566243270259356724*elem.pos(2)[1]+0.10566243270259356724*elem.pos(1)[1]-0.10566243270259356724*elem.pos(0)[1])-0.10566243270259356724*elem.pos(3)[1]-0.39433756729740643276*elem.pos(4)[1])-0.39433756729740643276*elem.pos(7)[1])*(0.71631284272709585555*elem.pos(7)[2]+0.072362291867717009992*elem.pos(6)[2]+(0.19193544773676716169*elem.pos(3)[2]+0.019389417668419972776*elem.pos(2)[2]-(0.019389417668419972776*elem.pos(1)[2]+0.19193544773676716169*elem.pos(0)[2]))-0.71631284272709585555*elem.pos(4)[2]-0.072362291867717009992*elem.pos(5)[2])-((0.39433756729740643276*elem.pos(6)[2]+(0.10566243270259356724*elem.pos(1)[2]-0.10566243270259356724*elem.pos(0)[2]+0.10566243270259356724*elem.pos(2)[2])-0.10566243270259356724*elem.pos(3)[2]-0.39433756729740643276*elem.pos(4)[2]+0.39433756729740643276*elem.pos(5)[2])-0.39433756729740643276*elem.pos(7)[2])*(0.71631284272709585555*elem.pos(7)[1]+0.072362291867717009992*elem.pos(6)[1]+(0.19193544773676716169*elem.pos(3)[1]+0.019389417668419972776*elem.pos(2)[1]-(0.019389417668419972776*elem.pos(1)[1]+0.19193544773676716169*elem.pos(0)[1]))-0.71631284272709585555*elem.pos(4)[1]-0.072362291867717009992*elem.pos(5)[1]))+((0.39433756729740643276*elem.pos(6)[0]+0.39433756729740643276*elem.pos(5)[0]+(0.10566243270259356724*elem.pos(2)[0]+0.10566243270259356724*elem.pos(1)[0]-0.10566243270259356724*elem.pos(0)[0])-0.10566243270259356724*elem.pos(3)[0]-0.39433756729740643276*elem.pos(4)[0])-0.39433756729740643276*elem.pos(7)[0])*((0.71631284272709585555*elem.pos(7)[1]+0.072362291867717009992*elem.pos(6)[1]+(0.19193544773676716169*elem.pos(3)[1]+0.019389417668419972776*elem.pos(2)[1]-(0.019389417668419972776*elem.pos(1)[1]+0.19193544773676716169*elem.pos(0)[1]))-0.71631284272709585555*elem.pos(4)[1]-0.072362291867717009992*elem.pos(5)[1])*(0.45412414523193150862*elem.pos(7)[2]+0.045875854768068491385*elem.pos(6)[2]+0.045875854768068491385*elem.pos(5)[2]+0.45412414523193150862*elem.pos(4)[2]-(0.45412414523193150862*elem.pos(3)[2]+0.045875854768068491385*elem.pos(2)[2]+0.045875854768068491385*elem.pos(1)[2]+0.45412414523193150862*elem.pos(0)[2]))-(0.71631284272709585555*elem.pos(7)[2]+0.072362291867717009992*elem.pos(6)[2]+(0.19193544773676716169*elem.pos(3)[2]+0.019389417668419972776*elem.pos(2)[2]-(0.019389417668419972776*elem.pos(1)[2]+0.19193544773676716169*elem.pos(0)[2]))-0.71631284272709585555*elem.pos(4)[2]-0.072362291867717009992*elem.pos(5)[2])*(0.45412414523193150862*elem.pos(7)[1]+0.045875854768068491385*elem.pos(6)[1]+0.045875854768068491385*elem.pos(5)[1]+0.45412414523193150862*elem.pos(4)[1]-(0.45412414523193150862*elem.pos(3)[1]+0.045875854768068491385*elem.pos(2)[1]+0.045875854768068491385*elem.pos(1)[1]+0.45412414523193150862*elem.pos(0)[1])))-(0.71631284272709585555*elem.pos(7)[0]+0.072362291867717009992*elem.pos(6)[0]+(0.19193544773676716169*elem.pos(3)[0]+0.019389417668419972776*elem.pos(2)[0]-(0.019389417668419972776*elem.pos(1)[0]+0.19193544773676716169*elem.pos(0)[0]))-0.71631284272709585555*elem.pos(4)[0]-0.072362291867717009992*elem.pos(5)[0])*(((0.39433756729740643276*elem.pos(6)[1]+0.39433756729740643276*elem.pos(5)[1]+(0.10566243270259356724*elem.pos(2)[1]+0.10566243270259356724*elem.pos(1)[1]-0.10566243270259356724*elem.pos(0)[1])-0.10566243270259356724*elem.pos(3)[1]-0.39433756729740643276*elem.pos(4)[1])-0.39433756729740643276*elem.pos(7)[1])*(0.45412414523193150862*elem.pos(7)[2]+0.045875854768068491385*elem.pos(6)[2]+0.045875854768068491385*elem.pos(5)[2]+0.45412414523193150862*elem.pos(4)[2]-(0.45412414523193150862*elem.pos(3)[2]+0.045875854768068491385*elem.pos(2)[2]+0.045875854768068491385*elem.pos(1)[2]+0.45412414523193150862*elem.pos(0)[2]))-((0.39433756729740643276*elem.pos(6)[2]+(0.10566243270259356724*elem.pos(1)[2]-0.10566243270259356724*elem.pos(0)[2]+0.10566243270259356724*elem.pos(2)[2])-0.10566243270259356724*elem.pos(3)[2]-0.39433756729740643276*elem.pos(4)[2]+0.39433756729740643276*elem.pos(5)[2])-0.39433756729740643276*elem.pos(7)[2])*(0.45412414523193150862*elem.pos(7)[1]+0.045875854768068491385*elem.pos(6)[1]+0.045875854768068491385*elem.pos(5)[1]+0.45412414523193150862*elem.pos(4)[1]-(0.45412414523193150862*elem.pos(3)[1]+0.045875854768068491385*elem.pos(2)[1]+0.045875854768068491385*elem.pos(1)[1]+0.45412414523193150862*elem.pos(0)[1]))));
return abs(V);
}

template<class TN,class TNG,class TD,unsigned NET,class TM>
bool divide_element(Element<Hexa_20,TN,TNG,TD,NET> &e,TM &m,TNG **nnodes) {
    std::cout << "divide_element not implemented for Hexa_20" << std::endl;
    assert(0);
    return false;
}
//template<class TN,class TNG,class TD,unsigned NET,class TM>
//bool divide_element(Element<Hexa_20,TN,TNG,TD,NET> &e,TM &m,TNG **nodes) {
//    const unsigned valid_tetra[] = {
//        0,1,2,3, 0,1,2,6, 0,1,2,8, 0,1,2,9, 0,1,3,5, 0,1,3,7, 0,1,3,9, 0,1,5,6, 0,1,5,8,
//        0,1,5,9, 0,1,6,7, 0,1,6,9, 0,1,7,8, 0,1,7,9, 0,1,8,9, 0,2,3,4, 0,2,3,7, 0,2,3,8,
//        0,2,4,6, 0,2,4,8, 0,2,4,9, 0,2,6,7, 0,2,6,8, 0,2,7,8, 0,2,7,9, 0,2,8,9, 0,3,4,5,
//        0,3,4,7, 0,3,4,9, 0,3,5,7, 0,3,5,8, 0,3,7,8, 0,3,7,9, 0,3,8,9, 0,4,5,6, 0,4,5,8,
//        0,4,5,9, 0,4,6,7, 0,4,6,9, 0,4,7,8, 0,4,7,9, 0,4,8,9, 0,5,6,7, 0,5,6,8, 0,5,7,8,
//        0,5,7,9, 0,5,8,9, 0,6,7,8, 0,6,7,9, 0,6,8,9, 0,7,8,9, 1,2,3,4, 1,2,3,5, 1,2,3,6,
//        1,2,4,6, 1,2,4,8, 1,2,4,9, 1,2,5,6, 1,2,5,8, 1,2,5,9, 1,2,6,8, 1,2,6,9, 1,3,4,5,
//        1,3,4,7, 1,3,4,9, 1,3,5,6, 1,3,5,7, 1,3,5,9, 1,3,6,7, 1,3,6,9, 1,4,5,6, 1,4,5,8,
//        1,4,5,9, 1,4,6,7, 1,4,6,9, 1,4,7,8, 1,4,7,9, 1,4,8,9, 1,5,6,7, 1,5,6,8, 1,5,6,9,
//        1,5,7,8, 1,5,7,9, 1,5,8,9, 1,6,7,8, 1,6,7,9, 1,6,8,9, 2,3,4,5, 2,3,4,6, 2,3,4,7,
//        2,3,4,8, 2,3,5,7, 2,3,5,8, 2,3,6,7, 2,3,6,8, 2,4,5,6, 2,4,5,8, 2,4,5,9, 2,4,6,7,
//        2,4,6,8, 2,4,6,9, 2,4,7,8, 2,4,7,9, 2,4,8,9, 2,5,6,7, 2,5,6,8, 2,5,7,8, 2,5,7,9,
//        2,5,8,9, 2,6,7,8, 2,6,7,9, 2,6,8,9, 3,4,5,6, 3,4,5,7, 3,4,5,8, 3,4,5,9, 3,4,6,7,
//        3,4,6,9, 3,4,7,8, 3,4,7,9, 3,4,8,9, 3,5,6,7, 3,5,6,8, 3,5,7,8, 3,5,7,9, 3,5,8,9,
//        3,6,7,8, 3,6,7,9, 3,6,8,9, 4,5,6,7, 4,5,6,8, 4,5,6,9, 4,5,7,8, 4,5,7,9, 4,6,7,8,
//        4,6,8,9, 4,7,8,9, 5,6,7,9, 5,6,8,9, 5,7,8,9, 6,7,8,9,
//    };
//    const unsigned div[] = {
//        /*   0      1 */    0,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*   1      1 */   15,  51,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*   2      1 */    4,  52,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*   3      1 */   26,  51,  87,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*   4      1 */    1,  53,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*   5      1 */   18,  51,  88,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*   6      1 */    7,  52,  65,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*   7      1 */   34,  51,  87, 112,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*   8      1 */    5,  16,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*   9      1 */   15,  63,  89,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  10      1 */    4,  66,  91,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  11      1 */   26,  62,  66,  91,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  12      1 */    1,  68,  93,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  13      1 */   16,  37,  63, 116,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  14      1 */    5,  42,  91, 121,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  15      1 */   27,  42,  63,  91, 121,1000,1000,1000,1000,1000,1000,1000,
//        /*  16      1 */    2,  17,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  17      1 */   15,  55,  90,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  18      1 */    2,  30,  92,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  19      1 */   17,  35,  55,  96,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  20      1 */    1,  60,  94,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  21      1 */   18,  54,  60,  94,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  22      1 */    2,  43,  92, 122,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  23      1 */   19,  43,  55,  92, 122,1000,1000,1000,1000,1000,1000,1000,
//        /*  24      1 */   12,  16,  31,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  25      1 */   15,  75,  89, 118,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  26      1 */    4,  81,  91, 123,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  27      1 */   17,  35,  71,  81, 106,1000,1000,1000,1000,1000,1000,1000,
//        /*  28      1 */    1,  84,  93, 126,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  29      1 */   16,  37,  73,  84, 126,1000,1000,1000,1000,1000,1000,1000,
//        /*  30      1 */    7,  57,  84,  93, 126,1000,1000,1000,1000,1000,1000,1000,
//        /*  31      1 */   19,  43,  75,  92, 101, 122,1000,1000,1000,1000,1000,1000,
//        /*  32      1 */    3,   6,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  33      1 */    3,  28,  64,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  34      1 */    4,  59,  67,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  35      1 */    6,  36,  56,  97,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  36      1 */    1,  61,  69,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  37      1 */    3,  38,  64, 117,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  38      1 */    7,  57,  61,  69,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  39      1 */    9,  38,  59,  64, 117,1000,1000,1000,1000,1000,1000,1000,
//        /*  40      1 */    5,  24,  32,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  41      1 */    6,  20,  76, 102,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  42      1 */    4,  66, 107, 124,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  43      1 */    6,  36,  72,  82, 107,1000,1000,1000,1000,1000,1000,1000,
//        /*  44      1 */    1,  68, 110, 127,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  45      1 */   11,  20,  69,  76, 102,1000,1000,1000,1000,1000,1000,1000,
//        /*  46      1 */    5,  42, 104, 110, 127,1000,1000,1000,1000,1000,1000,1000,
//        /*  47      1 */    9,  38,  64,  82, 107, 117,1000,1000,1000,1000,1000,1000,
//        /*  48      1 */    2,  25,  33,1000,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  49      1 */    3,  28,  77, 120,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  50      1 */    2,  30, 108, 125,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  51      1 */    9,  28,  59,  77, 120,1000,1000,1000,1000,1000,1000,1000,
//        /*  52      1 */    1,  60, 111, 128,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  53      1 */    3,  38,  74,  86, 128,1000,1000,1000,1000,1000,1000,1000,
//        /*  54      1 */    2,  43, 105, 111, 128,1000,1000,1000,1000,1000,1000,1000,
//        /*  55      1 */    9,  38,  59,  74,  86, 128,1000,1000,1000,1000,1000,1000,
//        /*  56      1 */   12,  23,  25,  33,1000,1000,1000,1000,1000,1000,1000,1000,
//        /*  57      1 */   13,  24,  28,  77, 120,1000,1000,1000,1000,1000,1000,1000,
//        /*  58      1 */    4,  81, 106, 108, 125,1000,1000,1000,1000,1000,1000,1000,
//        /*  59      1 */    9,  28,  77,  82, 107, 120,1000,1000,1000,1000,1000,1000,
//        /*  60      1 */    1,  84, 109, 111, 128,1000,1000,1000,1000,1000,1000,1000,
//        /*  61      1 */   11,  20,  76,  86, 102, 128,1000,1000,1000,1000,1000,1000,
//        /*  62      1 */    7,  57,  84, 109, 111, 128,1000,1000,1000,1000,1000,1000,
//        /*  63      1 */    9,  38,  74,  82,  86, 107, 128,1000,1000,1000,1000,1000,
//    };
//    unsigned index = bool(nodes[0])*1 + bool(nodes[1])*2 + bool(nodes[2])*4 + bool(nodes[3])*8 + 
//                     bool(nodes[4])*16 + bool(nodes[5])*32;
//    if ( index==0 )
//        return true;
//    if ( index==63 ) {
//        TNG *node_6 = m.add_node( center(e) );
//        m.add_element( Tetra(), TN(), e.node(0), nodes[0], nodes[1], nodes[2] );
//        m.add_element( Tetra(), TN(), e.node(1), nodes[0], nodes[3], nodes[4] );
//        m.add_element( Tetra(), TN(), e.node(2), nodes[1], nodes[3], nodes[5] );
//        m.add_element( Tetra(), TN(), e.node(3), nodes[2], nodes[4], nodes[5] );
//        
//        m.add_element( Tetra(), TN(), nodes[0], nodes[1], nodes[2], node_6 );
//        m.add_element( Tetra(), TN(), nodes[0], nodes[3], nodes[4], node_6 );
//        m.add_element( Tetra(), TN(), nodes[1], nodes[3], nodes[5], node_6 );
//        m.add_element( Tetra(), TN(), nodes[2], nodes[4], nodes[5], node_6 );
//        
//        m.add_element( Tetra(), TN(), nodes[0], nodes[2], nodes[4], node_6 );
//        m.add_element( Tetra(), TN(), nodes[1], nodes[2], nodes[5], node_6 );
//        m.add_element( Tetra(), TN(), nodes[3], nodes[4], nodes[5], node_6 );
//        m.add_element( Tetra(), TN(), nodes[0], nodes[1], nodes[3], node_6 );
//    }
//    else {
//        for(const unsigned *a = div + index * 12; *a!=1000; ++a ) {
//            TNG *nn[4];
//            for(unsigned i=0;i<4;++i)
//                if ( valid_tetra[*a * 4 + i] < 4 )
//                    nn[i] = e.node( valid_tetra[*a * 4 + i] );
//                else
//                    nn[i] = nodes[ valid_tetra[*a * 4 + i] - 4 ];
//            m.add_element( Tetra(), TN(), nn );
//        }
//    }
//    std::cout << "Surdiscretisation des Hexa_20 non implentee" << std::endl;
//    return false;
//   
//}

template<class TN,class TNG,class TD,unsigned NET,class TM>
bool divide_element_using_elem_children(Element<Hexa_20,TN,TNG,TD,NET> &e,TM &m,TNG **nnodes) {
    return divide_element(e,m,nnodes);
}

/*! new_nodes are independant nodes created to make a fine grid for integration. Used in TvrcFormulation
     \relates Hexa_20
    \todo actually, we divide element n times, with n = max(edge length) / max_dist. For flat elements, it's far from optimallity
//*/
//template<class TN,class TNG,class TD,unsigned NET,class T>
//bool subdivision_element(const Element<Tetra,TN,TNG,TD,NET> &e,Vec<TNG> &new_nodes,T max_dist) {
//    T max_l = max(
//            max( length( e.node(0)->pos - e.node(1)->pos ), length( e.node(0)->pos - e.node(2)->pos ), length( e.node(0)->pos - e.node(3)->pos ) ),
//            max( length( e.node(1)->pos - e.node(2)->pos ), length( e.node(1)->pos - e.node(3)->pos ) ),
//            length( e.node(2)->pos - e.node(3)->pos )
//    );
//    if ( max_l <= max_dist )
//        return false;
//    unsigned n = (unsigned)(max_l / max_dist);
//    for(unsigned i=0;i<n;++i) {
//        for(unsigned j=0;j<=i;++j) {
//            for(unsigned k=0;k<=j;++k) {
//                TNG *nn = new_nodes.new_elem();
//                T f1 = (i+1.0)/(n+1.0);
//                T f2 = (j+1.0)/(n+1.0);
//                T f3 = (k+1.0)/(n+1.0);
//                T f4 = 1.0-f1-f2-f3;
//                std::pair<T,const TNG *> pond_list[] = {
//                    std::pair<T,const TNG *>( f1, e.node(0) ),
//                    std::pair<T,const TNG *>( f2, e.node(1) ),
//                    std::pair<T,const TNG *>( f3, e.node(2) ),
//                    std::pair<T,const TNG *>( f4, e.node(3) )
//                };
//                DM::get_ponderation( pond_list, 4, *nn );
//            }
//        }
//    }
//    return true;
//}

template<class TV,class T>
bool var_inter_is_inside( const Hexa_20 &, const TV &var_inter, T tol = 0 ) {
    return heaviside( var_inter[0] + tol ) * heaviside( 1 - var_inter[0] + tol ) *
           heaviside( var_inter[1] + tol ) * heaviside( 1 - var_inter[1] + tol ) *
           heaviside( var_inter[2] + tol ) * heaviside( 1 - var_inter[2] + tol );
}

/// >= 0 -> inside, < 0 -> outside
template<class T,class TV>
T var_inter_insideness( const Hexa_20 &e, const TV &var_inter ) {
    return min( min( min( min( var_inter[0], var_inter[1] ), 1 - var_inter[0] ), 1 - var_inter[1] ), 1 - var_inter[2] );
}

inline unsigned vtk_num( StructForType<Hexa_20> ) { return 25; }

}

#include "element_Hexa_20.h"

#endif // LMTHEXA_20_H
