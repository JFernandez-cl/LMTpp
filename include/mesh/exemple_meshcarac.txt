/*!
\example Exemple de MeshCarac

    Il existe déjà quelques exemples ( \a MeshCaracStd , \a Mesh_carac_pb_correlation_basic , \a Meshcaracforgeomset , \a Meshcaractvrc, \a MeshCarac , \a MeshCaracAllNvi , \a CaracMeshShape ) mais ils ne sont pas très simples ou trop simples ;-).
    L'objectif de ces \a MeshCarac est de montrer comment on définit un avec quelques attributs au noeud en deux et trois dimensions. On a choisi un attribut scalaire nommé <strong> scalar </strong> et un vecteur 4 composantes <strong> vector_example </strong> .
    Voici le code (télechargeable [[include/mesh/exemple_meshcarac.tar.gz|ici]] ):
    \code C/C++
        #ifndef MESHCARAC_ILLUSTRATION_H
        #define MESHCARAC_ILLUSTRATION_H
        
        #include "mesh/nodalelement.h"
        #include "mesh/triangle.h"
        #include "mesh/quad.h"
        #include "mesh/quad_9.h"
        #include "mesh/quad_8.h"
        #include "mesh/quad_6.h"
        #include "mesh/quad_42.h"
        #include "mesh/triangle_6.h"
        #include "mesh/bar.h"
        #include "mesh/tetra.h"
        #include "mesh/hexa.h"
        namespace LMT {
        
        //template<unsigned nb_dim,class T> class MeshCaracIllustration;
        
        #ifndef IFNDEF_pos_DM
        #define IFNDEF_pos_DM
            struct pos_DM {};
        #endif // IFNDEF_pos_DM
        
        #ifndef IFNDEF_scalar_DM
        #define IFNDEF_scalar_DM
            struct scalar_DM {};
        #endif // IFNDEF_scalar_DM
        
        #ifndef IFNDEF_vector_DM
        #define IFNDEF_vector_DM
            struct vector_example_DM {};
        #endif // IFNDEF_vector_example_DM
        
        #ifndef IFNDEF_num_structure_DM
        #define IFNDEF_num_structure_DM
            struct num_structure_DM {};
        #endif // IFNDEF_num_structure_DM
        
        template<unsigned nb_dim,class T> class MeshCaracIllustration {
        
        };
        
        template<class T> class MeshCaracIllustration<2,T> { 
        public:
            static const unsigned dim = 2;
            static const unsigned dim_vector_example = 4;
            typedef T Tpos;
            typedef Vec<T,dim> Pvec;
            typedef Vec<T,dim_vector_example> Tvector_example;
            struct NodalStaticData {
                NodalStaticData():scalar(0.0),vector_example(0.0) {}
                //typedef Vec<T,1> T0;
                typedef T T0;
                CARACDMEXTNAME(0,T0,scalar,"");
                typedef Vec<T,dim_vector_example> T1;
                CARACDMEXTNAME(1,T1,vector_example,"");
                CARACDMEXTNAME(2,Pvec,pos,"m");
                static const unsigned nb_params = 3;
                void dm_data_set_field( const std::string field_name, Tpos value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) { assert(0);   }
                template<class __G__> __G__ dm_data_get_field( const std::string field_name, StructForType<__G__> ) const { assert( 0   ); return __G__( 0.0 );  }
            };
            struct GlobalStaticData {
                VOIDDMSET;
                void dm_data_set_field( const std::string field_name, Tpos value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) { assert(0);   }
                template<class __G__> __G__ dm_data_get_field( const std::string field_name, StructForType<__G__> ) const { assert( 0   ); return __G__( 0.0 );  }
            };
            struct TCDM0 {
                TCDM0():num_structure(0) {}
                CARACDMEXTNAME(0,unsigned,num_structure,"");
                static const unsigned nb_params = 1;
                void dm_data_set_field( const std::string field_name, Tpos value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) { assert(0);   }
                template<class __G__> __G__ dm_data_get_field( const std::string field_name, StructForType<__G__> ) const { assert( 0   ); return __G__( 0.0 );  }
            };
            template<unsigned nvi_to_subs,unsigned skin,unsigned num_sub_element,unsigned inner=0>
            struct ElementChoice {
                typedef void NE;
                typedef DefaultBehavior BE;
                typedef VoidDMSet TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,0,inner> {
                typedef Quad NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,1,inner> {
                typedef Triangle NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,2,inner> {
                typedef Quad_9 NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,3,inner> {
                typedef Triangle_6 NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,4,inner> {
                typedef Quad_42 NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,5,inner> {
                typedef Quad_8 NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,6,inner> {
                typedef Quad_6 NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<1,skin,0,inner> {
                typedef Bar NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<1,skin,1,inner> {
                typedef Bar_3 NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<1,skin,2,inner> {
                typedef Bar_4 NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned inner> struct ElementChoice<2,0,0,inner> {
                typedef NodalElement NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
        };
        
        template<class T> class MeshCaracIllustration<3,T> { 
        public:
            static const unsigned dim = 3;
            static const unsigned dim_vector_example = 4;
            typedef T Tpos;
            typedef Vec<T,dim> Pvec;
            typedef Vec<T,dim_vector_example> Tvector_example;
            struct NodalStaticData {
                NodalStaticData():scalar(0.0),vector_example(0.0) {}
                //typedef Vec<T,1> T0;
                typedef T T0;
                CARACDMEXTNAME(0,T0,scalar,"");
                typedef Vec<T,dim_vector_example> T1;
                CARACDMEXTNAME(1,T1,vector_example,"");
                CARACDMEXTNAME(2,Pvec,pos,"m");
                static const unsigned nb_params = 3;
                void dm_data_set_field( const std::string field_name, Tpos value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) { assert(0);   }
                template<class __G__> __G__ dm_data_get_field( const std::string field_name, StructForType<__G__> ) const { assert( 0   ); return __G__( 0.0 );  }
            };
            struct GlobalStaticData {
                VOIDDMSET;
                void dm_data_set_field( const std::string field_name, Tpos value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) { assert(0);   }
                template<class __G__> __G__ dm_data_get_field( const std::string field_name, StructForType<__G__> ) const { assert( 0   ); return __G__( 0.0 );  }
            };
            struct TCDM0 {
                TCDM0():num_structure(0) {}
                CARACDMEXTNAME(0,unsigned,num_structure,"");
                static const unsigned nb_params = 1;
                void dm_data_set_field( const std::string field_name, Tpos value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) { assert(0);   }
                void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) { assert(0);   }
                template<class __G__> __G__ dm_data_get_field( const std::string field_name, StructForType<__G__> ) const { assert( 0   ); return __G__( 0.0 );  }
            };
            template<unsigned nvi_to_subs,unsigned skin,unsigned num_sub_element,unsigned inner=0>
            struct ElementChoice {
                typedef void NE;
                typedef DefaultBehavior BE;
                typedef VoidDMSet TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,0,inner> {
                typedef Hexa NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<1,skin,0,inner> {
                typedef Quad NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned skin,unsigned inner> struct ElementChoice<2,skin,0,inner> {
                typedef Bar NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
            template<unsigned inner> struct ElementChoice<3,0,0,inner> {
                typedef NodalElement NE;
                typedef DefaultBehavior BE;
                typedef TCDM0 TData;
            };
        };
  
    \a ElementChoice est un type important. Il sert à définir les différents type d'éléments du maillage ainsi que ces sous-maillages et sa peau.

    Voici enfin un exemple d'utilisation avec les fonctions \a get_var_inter , \a var_inter_is_inside et \a apply .
    \code C/C++
        #include "mesh/make_rect.h"
        #include "mesh/meshcaracstd.h"
        #include "meshcaracillustration.h"
        #include "mesh/mesh.h"
        #include "mesh/quad.h"
        #include "mesh/quad_8.h"
        #include "mesh/triangle.h"
        #include "mesh/triangle_6.h"
        #include "mesh/element_Bar_3.h"
        #include "mesh/hexa.h"
        #include "mesh/element_Bar_3.h"
        
        using namespace LMT;
        using namespace std;
        
        // Extrapole en un point du maillage.

        template <class T>
        struct Interpolation_perso {
            void init() { sum = 0; }
            Interpolation_perso() { init();}
            template<class TE,class Pvec> void operator()( const TE &e, const Pvec &P ) {
                Vec<Pvec,TE::nb_nodes> pos_nodes;
                for(unsigned i=0;i<TE::nb_nodes;++i)
                    pos_nodes[i] = e.node( i )->pos;
        
                Vec<typename TE::T,TE::nb_nodes> valeurs_elem;
                for(unsigned i=0;i<TE::nb_nodes;++i)
                    valeurs_elem[i] = e.node( i )->scalar;
        
                Vec<typename TE::T,TE::dim> var_inter;
                get_var_inter( typename TE::NE(), pos_nodes, P, var_inter ); // cette fonction retourne dans var_inter les coordonnées de P dans le repère de référence 
                if ( var_inter_is_inside( typename TE::NE(), var_inter, std::numeric_limits<typename TE::T>::epsilon() * 10 ) ) {
                    typename TE::T res ;
                    get_interp( typename TE::NE(), Nodal(), var_inter,valeurs_elem, res );
                    sum += res;
                } else
                    cout << "pouet!" << endl;
            }
        
            T sum;
        };
        
        int main(int argc,char* argv[]) {
        
            typedef Quad NE;
            //typedef Triangle NE;
            //typedef Quad_9 NE;
            //typedef Triangle_6 NE;
            //typedef Quad_42 NE;
            //typedef Quad_8 NE;
            //typedef Quad_6 NE;
            typedef Mesh<MeshCaracIllustration<2,double> > TM;
            typedef TM::Pvec Pvec;
        
            TM m;
            make_rect( m, NE(), Pvec( 0, 0 ), Pvec( 1., 1. ), Pvec( 2, 2 ) );
            PRINT(m.node_list.size());
            PRINT(m.elem_list.size());
            if (m.elem_list.size() == 0) {
                cerr << "Arrêt brutal car il n' y a aucun élément dans le maillage..." << endl;
                return 1;
            }
        
            for(int i=0;i<m.node_list.size();++i)
                m.node_list[i].scalar = i;
        
            Interpolation_perso<TM::TNode::T> interpolation_perso;
            PRINT(interpolation_perso.sum);
        
            apply(m.elem_list,interpolation_perso,Pvec(0.2,0.3) );
        
            PRINT(interpolation_perso.sum);
        
            return 0;
        }



    \relates get_shape_functions
    \relates get_var_inter_linear
    \relates get_var_inter
    \relates var_inter_is_inside
    \relates apply
    \keyword Maillage/Elément
    \friend hugo.leclerc@lmt.ens-cachan.fr
    \friend samir.amrouche@lmt.ens-cachan.fr
*/
